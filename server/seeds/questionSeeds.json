[
  {
    "lesson": "1",
    "category": "HTML",
    "question": "What is the purpose of the alt attribute for images?",
    "explanation": "The alt tag is what a text description of the image. This is particularly useful for users who rely on a screen reader.",
    "answers": [
      { "answerText": "To prevent search engines from indexing the image.", "isCorrectAnswer": false },
      { "answerText": "To make it easier to style the image with CSS.", "isCorrectAnswer": false },
      { "answerText": "To make the image load faster. ", "isCorrectAnswer": false },
      {
        "answerText": "To provide context for the images in the cases where they are not observable, either due to an accessibility challenge or a broken link.",
        "isCorrectAnswer": true
      }
    ]
  },
  {
    "lesson": "1",
    "category": "HTML",
    "question": "What is an HTML semantic element?",
    "explanation": "",
    "answers": [
      {
        "answerText": "Semantic elements, like <div>, hold the important content together so it's easy to understand.",
        "isCorrectAnswer": true
      },
      {
        "answerText": "A semantic element clearly describes its meaning to both the browser and the developer.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "A semantic element reveals nothing about its content to the browser or the developer.",
        "isCorrectAnswer": false
      },
      { "answerText": "Semantic elements are outdated and are no longer used in HTML.", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "1",
    "category": "CSS",
    "question": "Given the following CSS selector, which HTML element would be the outermost/parent element? header nav ul li {color: white;}",
    "explanation": "Header is the outermost element making it the parent. All other elements are contained within the header making them the children.",
    "answers": [
      { "answerText": "<header>", "isCorrectAnswer": true },
      { "answerText": "<nav>", "isCorrectAnswer": false },
      { "answerText": "<ul>", "isCorrectAnswer": false },
      { "answerText": "<li>", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "1",
    "category": "CSS",
    "question": "Which of the following is not a component of the box model?",
    "explanation": "The components of a box model are margin border padding and the content.",
    "answers": [
      { "answerText": "border", "isCorrectAnswer": false },
      { "answerText": "padding", "isCorrectAnswer": false },
      { "answerText": "display", "isCorrectAnswer": true },
      { "answerText": "the content", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "1",
    "category": "HTML",
    "question": "When linking a CSS file to an HTML file, where does the link go?",
    "explanation": "The link to the CSS file would be placed in the <head> element.",
    "answers": [
      { "answerText": "<head>", "isCorrectAnswer": true },
      { "answerText": "<header>", "isCorrectAnswer": false },
      { "answerText": "<body>", "isCorrectAnswer": false },
      { "answerText": "<section>", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "1",
    "category": "HTML",
    "question": "What does HTML stand for?",
    "explanation": "HyperText Markup Language",
    "answers": [
      { "answerText": "HyperText Markup Language", "isCorrectAnswer": true },
      { "answerText": "Hyperspace Textual Markup Lingo", "isCorrectAnswer": false },
      { "answerText": "Holographic Text Manipulation Logic", "isCorrectAnswer": false },
      { "answerText": "Hungry Tiger Markup Lexicon", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "1",
    "category": "CSS",
    "question": "What does CSS stand for?",
    "explanation": "Cascading Style Sheets",
    "answers": [
      { "answerText": "Cascading Style Sheets", "isCorrectAnswer": true },
      { "answerText": "Computer Script System", "isCorrectAnswer": false },
      { "answerText": "Custom Style Script", "isCorrectAnswer": false },
      { "answerText": "Cascading Script Sheets", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "2",
    "category": "CSS",
    "question": "Which of the following is a true statement about pseudo-elements and pseudo-classes?",
    "explanation": "Pseudo-elements also differ from pseudo-classes in that they act as if you had added a whole new HTML element into the markup instead of applying a class to existing elements.",
    "answers": [
      { "answerText": "Pseudo-elements and pseudo-classes are actually the same thing", "isCorrectAnswer": false },
      {
        "answerText": "Pseudo-elements start with a double colon (::) and pseudo-classes start with a single colon (:)",
        "isCorrectAnswer": true
      },
      { "answerText": "::before is both a pseudo-element and a pseudo-class", "isCorrectAnswer": false },
      { "answerText": "Pseudo-elements and pseudo-classes cannot be combined", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "2",
    "category": "CSS",
    "question": "How do you declare a custom property or CSS variable?",
    "explanation": "Variables are set within the root and are called with var.",
    "answers": [
      { "answerText": "var root-my-color = green", "isCorrectAnswer": false },
      { "answerText": ":root { --my-color: green; }", "isCorrectAnswer": true },
      { "answerText": "var my-color = green", "isCorrectAnswer": false },
      { "answerText": ":root { var my-color = green }", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "2",
    "category": "CSS",
    "question": "How would you create a box with rounded corners using CSS?",
    "explanation": "The border-radius property allows you to style a box to have rounded corners.",
    "answers": [
      { "answerText": "transform: round(corner)", "isCorrectAnswer": false },
      { "answerText": "box-corner: round;", "isCorrectAnswer": false },
      { "answerText": "border-radius: 50px;", "isCorrectAnswer": true },
      { "answerText": "corner-style: round;", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "2",
    "category": "CSS",
    "question": "Which of the following is not a unit of measurement in CSS?",
    "explanation": "Centemeters are not used in CSS.",
    "answers": [
      { "answerText": "Pixels (px)", "isCorrectAnswer": false },
      { "answerText": "Percentages (%)", "isCorrectAnswer": false },
      { "answerText": "Em (em)", "isCorrectAnswer": false },
      { "answerText": "Centimeters (cm)", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "2",
    "category": "CSS",
    "question": "What does the 'Cascading' in CSS refer to?",
    "explanation": "The style flow from the top down, cascading down like a waterfall.",
    "answers": [
      { "answerText": "The flow of text within an HTML document", "isCorrectAnswer": true },
      { "answerText": "The ability to apply multiple styles to an element", "isCorrectAnswer": false },
      { "answerText": "The hierarchical order of style precedence", "isCorrectAnswer": false },
      { "answerText": "The animation effects applied to elements", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "3",
    "category": "JavaScript",
    "question": "Where do you place your JavaScript code inside the HTML document?",
    "explanation": "JavaScript is placed inside the <script> element of the HTML document.",
    "answers": [
      { "answerText": "Inside the <head> element", "isCorrectAnswer": false },
      { "answerText": "In the <footer> element", "isCorrectAnswer": false },
      { "answerText": "Inside the <link> element", "isCorrectAnswer": false },
      { "answerText": "Inside the <script> element", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "3",
    "category": "JavaScript",
    "question": "Which operator is used to assign a value to a declared variable?",
    "explanation": " The correct way to assign a variable is with an equal sign(=).",
    "answers": [
      { "answerText": "Question mark (?)", "isCorrectAnswer": false },
      { "answerText": "Colon (:)", "isCorrectAnswer": false },
      { "answerText": "Equal sign (=)", "isCorrectAnswer": true },
      { "answerText": "Double-equal (==)", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "3",
    "category": "JavaScript",
    "question": "What are the seven primitive data types in JavaScript?",
    "explanation": "string, number, boolean, bigint, symbol, undefined, null",
    "answers": [
      { "answerText": "string, num, falsy, bigint, symbol, undefined, null", "isCorrectAnswer": false },
      { "answerText": "string, number, boolean, bigint, symbol, undefined, null", "isCorrectAnswer": true },
      { "answerText": "sentence, float, data, bigint, symbol, undefined, null", "isCorrectAnswer": false },
      { "answerText": "sentence, int, truthy, bigint, symbol, undefined, null", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "3",
    "category": "JavaScript",
    "question": "What is the difference between && and ||?",
    "explanation": "The logical operator && returns true if both expressions are true, while the logical operator || returns true if one expression or the other returns true.",
    "answers": [
      {
        "answerText": "The logical operator && returns true if none of the expressions are true, while the logical operator || returns true if one expression or the other returns true",
        "isCorrectAnswer": false
      },
      {
        "answerText": "The logical operator && returns true if one expression is true, while the logical operator || returns true if both expressions return true.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "The logical operator && returns true if both expressions are true, while the logical operator || returns true if one expression or the other returns true.",
        "isCorrectAnswer": true
      },
      {
        "answerText": "The logical operator && returns true if both expressions are true, while the logical operator || returns false if one expression or the other returns true.",
        "isCorrectAnswer": false
      }
    ]
  },
  {
    "lesson": "3",
    "category": "JavaScript",
    "question": "What is the index of the letter 'b' in the following array? ['a', 'b', 'c', 'd']",
    "explanation": "Arrays are zero-indexed, meaning that the first index is always 0. That means 'b' would be at index 1.",
    "answers": [
      { "answerText": "1", "isCorrectAnswer": true },
      { "answerText": "2", "isCorrectAnswer": false },
      { "answerText": "3", "isCorrectAnswer": false },
      { "answerText": "4", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "4",
    "category": "APIs",
    "question": "Which value would we add to setInterval() if we want a function called myTimer() to run every 3 seconds?",
    "explanation": "Interval is always entered in milliseconds.",
    "answers": [
      { "answerText": "setInterval(myTimer, 300)", "isCorrectAnswer": false },
      { "answerText": "setInterval(myTimer, 3)", "isCorrectAnswer": false },
      { "answerText": "setInterval(myTimer, 30)", "isCorrectAnswer": false },
      { "answerText": "setInterval(myTimer, 3000)", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "4",
    "category": "APIs",
    "question": "Which event property can you use in order to implement event delegation? ",
    "explanation": "We can use event.target to implement event delegation on a parent element and check for events on child elements that bubble up to the parent element. This allows us to handle events for multiple child elements without creating event handlers for each of the elements.",
    "answers": [
      { "answerText": "event.preventDefault()", "isCorrectAnswer": false },
      { "answerText": "event.stopPropagation()", "isCorrectAnswer": false },
      { "answerText": "event.target", "isCorrectAnswer": true },
      { "answerText": "event.addEventListener", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "4",
    "category": "APIs",
    "question": "Which statement best describes what is happening to data when it is persisted to local storage?",
    "explanation": "When data is persisted to local storage, it is stored in the client, or browser.",
    "answers": [
      { "answerText": "The data is stored in Chrome Dev Tools.", "isCorrectAnswer": false },
      { "answerText": "The data is stored in the database in the back end.", "isCorrectAnswer": false },
      { "answerText": "The data is stored in a window called localStorage.", "isCorrectAnswer": false },
      { "answerText": "The data is stored in the client, or browser.", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "4",
    "category": "APIs",
    "question": "You need to retrieve data with the key name of 'formData' from local storage and convert it into an object. How would you accomplish this?",
    "explanation": "We converted formData to a JSON string in order to store it, and now we need to parse it in order to convert it back into an object.",
    "answers": [
      { "answerText": "const formData = JSON.parse(localStorage.getItem('formData'));", "isCorrectAnswer": true },
      { "answerText": "const formData = JSON.parse(localStorage.setItem('formData'));", "isCorrectAnswer": false },
      { "answerText": "const formData = JSON.parse('formData');", "isCorrectAnswer": false },
      { "answerText": "const formData = JSON.stringify(localStorage.getItem('formData'));", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "4",
    "category": "APIs",
    "question": "Why do we need to convert an object into JSON in order for it to properly persist to local storage?",
    "explanation": "We convert an object to a string using JSON because local storage can only store strings.",
    "answers": [
      { "answerText": "Local storage only accepts JSON objects.", "isCorrectAnswer": true },
      {
        "answerText": "Local storage can only store strings, so we convert the object to a JSON string to store it properly.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "Local storage cannot read JavaScript, so we convert JavaScript into JSON.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "It is convention to store objects using JSON, and we must follow that pattern so that our code is easy to read.",
        "isCorrectAnswer": false
      }
    ]
  },
  {
    "lesson": "4",
    "category": "APIs",
    "question": "What is an API?",
    "explanation": "",
    "answers": [
      { "answerText": "An API allows two applications to run in tandem. ", "isCorrectAnswer": false },
      {
        "answerText": "An API allows two applications to communicate if they are both using the same server.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "An API allows two applications to be installed onto a user's computer.",
        "isCorrectAnswer": false
      },
      { "answerText": "An API allows two applications to communicate with each other.", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "5",
    "category": "APIs",
    "question": "What does CDN stand for?",
    "explanation": "Content Delivery Network.",
    "answers": [
      { "answerText": "Content Distribution Network", "isCorrectAnswer": false },
      { "answerText": "Centralized Data Network", "isCorrectAnswer": false },
      { "answerText": "Cache Delivery Network", "isCorrectAnswer": false },
      { "answerText": "Content Delivery Network", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "5",
    "category": "APIs",
    "question": "What is jQuery UI?",
    "explanation": "jQuery UI is a curated set of user interface widgets, effects, and themes that extends the functionality of the core jQuery library.",
    "answers": [
      { "answerText": "jQuery UI is a framework to create interactive user interfaces.", "isCorrectAnswer": false },
      {
        "answerText": "jQuery UI is a design pattern that has to be used when creating interactive UI's with JavaScript.",
        "isCorrectAnswer": false
      },
      { "answerText": "jQuery UI is a set of user interface website templates.", "isCorrectAnswer": false },
      {
        "answerText": "jQuery UI is a curated set of user interface widgets, effects, and themes that extends the functionality of the core jQuery library.",
        "isCorrectAnswer": true
      }
    ]
  },
  {
    "lesson": "5",
    "category": "APIs",
    "question": "Creating an API call using the .ajax() method requires which third-party library?",
    "explanation": "If we want to create API calls using the .ajax() method, we have to include jQuery in our code.",
    "answers": [
      { "answerText": "jQuery", "isCorrectAnswer": true },
      { "answerText": "fetch", "isCorrectAnswer": false },
      { "answerText": "Bootstrap", "isCorrectAnswer": false },
      { "answerText": "cURL", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "5",
    "category": "HTML",
    "question": "Which HTML element can the submit event be attached to?",
    "explanation": "You can attach the submit event to the HTML form element.",
    "answers": [
      { "answerText": "form", "isCorrectAnswer": true },
      { "answerText": "button", "isCorrectAnswer": false },
      { "answerText": "input", "isCorrectAnswer": false },
      { "answerText": "textarea", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "5",
    "category": "APIs",
    "question": "I want to capture when a user clicks on an element. Which jQuery event method should I use?",
    "explanation": ".on() adds an event handler to an element. When used to listen for click events, the syntax would be .on('click').",
    "answers": [
      { "answerText": ".mouseout()", "isCorrectAnswer": false },
      { "answerText": ".focus()", "isCorrectAnswer": false },
      { "answerText": ".on()", "isCorrectAnswer": true },
      { "answerText": ".mouseover()", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "6",
    "category": "APIs",
    "question": "Which status code shows a successful response when making a request to an API?",
    "explanation": "200 indicates a successful response.",
    "answers": [
      { "answerText": "200", "isCorrectAnswer": true },
      { "answerText": "404", "isCorrectAnswer": false },
      { "answerText": "500", "isCorrectAnswer": false },
      { "answerText": "401", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "6",
    "category": "APIs",
    "question": "Which status code shows a internal server error?",
    "explanation": "500 indicates an internal server error.",
    "answers": [
      { "answerText": "200", "isCorrectAnswer": false },
      { "answerText": "404", "isCorrectAnswer": false },
      { "answerText": "500", "isCorrectAnswer": true },
      { "answerText": "401", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "6",
    "category": "APIs",
    "question": "Which status code shows a page was not found?",
    "explanation": "404 indicates a page was not found.",
    "answers": [
      { "answerText": "200", "isCorrectAnswer": false },
      { "answerText": "404", "isCorrectAnswer": true },
      { "answerText": "500", "isCorrectAnswer": false },
      { "answerText": "401", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "6",
    "category": "APIs",
    "question": "What is the purpose of the fetch API?",
    "explanation": "The fetch API uses methods like GET to make network requests that can retrieve data or resources fomr internal or external sources.",
    "answers": [
      { "answerText": "To build an API.", "isCorrectAnswer": false },
      {
        "answerText": "To make network requests, either internally in an application or to an external source.",
        "isCorrectAnswer": true
      },
      { "answerText": "To turn JSON into JavaScript.", "isCorrectAnswer": false },
      {
        "answerText": "To redirect to a 404 Not Found page when the resource is unavailable.",
        "isCorrectAnswer": false
      }
    ]
  },
  {
    "lesson": "6",
    "category": "API",
    "question": "When using AJAX to retreive data, we pass in the GET method and what else as parameters?",
    "explanation": "We pass in the URL, which specifies which URL we want to request data from.",
    "answers": [
      { "answerText": "a URL", "isCorrectAnswer": true },
      { "answerText": "jQuery", "isCorrectAnswer": false },
      { "answerText": "fetch", "isCorrectAnswer": false },
      { "answerText": "JSON", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "9",
    "category": "JavaScript",
    "question": "How would we convert the following function to an arrow function? let mood = function(emotion) {}",
    "explanation": "We remove the function keyword before the parameter ((emotion)) and add the arrow (=>) after the parameter and before the body braces.",
    "answers": [
      { "answerText": "let mood => ()emotion) => {}", "isCorrectAnswer": false },
      { "answerText": "let mood = (emotion) => {}", "isCorrectAnswer": true },
      { "answerText": "let function mood(emotion) => {}", "isCorrectAnswer": false },
      { "answerText": "function = mood(emotion) => {}", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "9",
    "category": "JavaScript",
    "question": "We need to iterate over data in an array. Which method would we use to do this?",
    "explanation": "map() will iterate over each index in the array.",
    "answers": [
      { "answerText": ".filter()", "isCorrectAnswer": false },
      { "answerText": ".forEach()", "isCorrectAnswer": false },
      { "answerText": ".map()", "isCorrectAnswer": true },
      { "answerText": ".reduce()", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "9",
    "category": "BackEnd",
    "question": "What is the purpose of object destructuring?",
    "explanation": "Destructuring lets us unpack properties from an object and create their own distinct variable.",
    "answers": [
      { "answerText": "It lets us transform an object into an array of key/value pairs.", "isCorrectAnswer": false },
      {
        "answerText": "It lets us easily map through our object in order to update the update the values.",
        "isCorrectAnswer": false
      },
      { "answerText": "It lets us pass an object as a function's argument.", "isCorrectAnswer": false },
      {
        "answerText": "It lets us unpack properties from an object and create their own distinct variable.",
        "isCorrectAnswer": true
      }
    ]
  },
  {
    "lesson": "9",
    "category": "BackEnd",
    "question": "What is npm short for and what does it do?",
    "explanation": "",
    "answers": [
      {
        "answerText": "Node Play Model. It's a Command Line Interface (CLI) that Node.js developers use when dealing with media files inside their applications.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "Node Package Maker. It's a tool that allows developers to easily ship their code to businesses that require it.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "Node Prototype Module. It's a design philosophy used when creating Node.js applications.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "Node Package Manager. It's an open source online repository used to share and borrow packages in Node.js, with its own Command Line Interface (CLI).",
        "isCorrectAnswer": true
      }
    ]
  },
  {
    "lesson": "9",
    "category": "JavaScript",
    "question": "How do we convert JSON data to a string?",
    "explanation": "",
    "answers": [
      { "answerText": "JSON.string()", "isCorrectAnswer": false },
      { "answerText": "JSON.stringify()", "isCorrectAnswer": true },
      { "answerText": "JSON.toString()", "isCorrectAnswer": false },
      { "answerText": "JSON.stringing()", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "10",
    "category": "OOP",
    "question": "What is polymorphism in terms of OOP?",
    "explanation": "It provides a way to perform a single action in different forms.",
    "answers": [
      { "answerText": "It provides a way to perform a single action in different forms.", "isCorrectAnswer": true },
      { "answerText": "It provides the ability to reuse the code of existing Classes.", "isCorrectAnswer": false },
      {
        "answerText": "It describes the idea of bundling data and methods that work on that data within one unit.",
        "isCorrectAnswer": false
      },
      {
        "answerText": "It is the mechanism of hiding data implementation by restricting access to public methods.",
        "isCorrectAnswer": false
      }
    ]
  },
  {
    "lesson": "10",
    "category": "OOP",
    "question": "What is the purpose of writing failing tests in TDD?",
    "explanation": "To clearly define the expected outcome before writing any code.",
    "answers": [
      {
        "answerText": "To speed up the development process by skipping directly to writing code.",
        "isCorrectAnswer": false
      },
      { "answerText": "To ensure that the tests pass without any issues.", "isCorrectAnswer": false },
      { "answerText": "To satisfy code coverage.", "isCorrectAnswer": false },
      { "answerText": "To clearly define the expected outcome before writing any code.", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "10",
    "category": "OOP",
    "question": "What are the stages of TDD in the correct order?",
    "explanation": "First write a test that fails, then pass the test however possible, then refactor the code.",
    "answers": [
      { "answerText": "Fail --> Pass --> Refactor", "isCorrectAnswer": true },
      { "answerText": "Test --> Code --> Pass", "isCorrectAnswer": false },
      { "answerText": "Code --> Test --> Pass", "isCorrectAnswer": false },
      { "answerText": "Pass --> Fail --> Refactor", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "10",
    "category": "OOP",
    "question": "What is Jest?",
    "explanation": "Jest is a popular JavaScript testing framework.",
    "answers": [
      { "answerText": "Jest is a library for managing state in React applications.", "isCorrectAnswer": false },
      { "answerText": "Jest is a popular JavaScript testing framework.", "isCorrectAnswer": true },
      { "answerText": "Jest is a front-end framework for building user interfaces.", "isCorrectAnswer": false },
      { "answerText": "Jest is a build tool for JavaScript applications.", "isCorrectAnswer": false }
    ]
  },
  {
    "lesson": "10",
    "category": "OOP",
    "question": "Which of the following is NOT true regarding Jest helpers?",
    "explanation": "toBeUndefined actually only matches undefined, not null and false.",
    "answers": [
      { "answerText": "toBeDefined is the opposite of toBeUndefined.", "isCorrectAnswer": false },
      { "answerText": "toBeNull only matches null.", "isCorrectAnswer": false },
      { "answerText": "toBeTruthy matches anything that an if statement treats as true.", "isCorrectAnswer": false },
      { "answerText": "toBeUndefined matches undefined, null, and false.", "isCorrectAnswer": true }
    ]
  },
  {
    "lesson": "",
    "category": "",
    "question": "",
    "explanation": "",
    "answers": [
      { "answerText": "", "isCorrectAnswer": false },
      { "answerText": "", "isCorrectAnswer": false },
      { "answerText": "", "isCorrectAnswer": false },
      { "answerText": "", "isCorrectAnswer": false }
    ]
  }
]
